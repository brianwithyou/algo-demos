package com.brian.leet36ValidSudoku;

/**
 * 36. 有效的数独
 * 请你判断一个9 x 9 的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
 * 数字1-9在每一行只能出现一次。
 * 数字1-9在每一列只能出现一次。
 * 数字1-9在每一个以粗实线分隔的3x3宫内只能出现一次。（请参考示例图）
 * <p>
 * 一个有效的数独（部分已被填充）不一定是可解的。
 * 只需要根据以上规则，验证已经填入的数字是否有效即可。
 * 空白格用'.'表示。
 * <p>
 * 输入：board =
 * [["5","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：true
 * <p>
 * 输入：board =
 * [["8","3",".",".","7",".",".",".","."]
 * ,["6",".",".","1","9","5",".",".","."]
 * ,[".","9","8",".",".",".",".","6","."]
 * ,["8",".",".",".","6",".",".",".","3"]
 * ,["4",".",".","8",".","3",".",".","1"]
 * ,["7",".",".",".","2",".",".",".","6"]
 * ,[".","6",".",".",".",".","2","8","."]
 * ,[".",".",".","4","1","9",".",".","5"]
 * ,[".",".",".",".","8",".",".","7","9"]]
 * 输出：false
 * 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。
 * <p>
 * 链接：https://leetcode.cn/problems/valid-sudoku
 *
 * @author : brian
 * @since 0.1
 */
public class Solution {
    public boolean isValidSudoku(char[][] board) {

        int[][] row = new int[9][9];
        int[][] column = new int[9][9];
        int[][][] square = new int[3][3][9];

        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board.length; j++) {
                if (board[i][j] != '.') {
                    int idx = board[i][j] - '1';
                    row[i][idx]++;
                    column[j][idx]++;
                    square[i / 3][j / 3][idx]++;
                    if (row[i][idx] > 1 || column[j][idx] > 1 || square[i / 3][j / 3][idx] > 1) {
                        return false;
                    }
                }
            }
        }
        return true;
    }

    public static void main(String[] args) {
        // true
//        char[][] data = new char[][]
//                {{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
//                 {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
//                 {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
//                 {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
//                 {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
//                 {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
//                 {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
//                 {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
//                 {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};

        // false
        char[][] data = new char[][]
                {{'8', '3', '.', '.', '7', '.', '.', '.', '.'},
                {'6', '.', '.', '1', '9', '5', '.', '.', '.'},
                {'.', '9', '8', '.', '.', '.', '.', '6', '.'},
                {'8', '.', '.', '.', '6', '.', '.', '.', '3'},
                {'4', '.', '.', '8', '.', '3', '.', '.', '1'},
                {'7', '.', '.', '.', '2', '.', '.', '.', '6'},
                {'.', '6', '.', '.', '.', '.', '2', '8', '.'},
                {'.', '.', '.', '4', '1', '9', '.', '.', '5'},
                {'.', '.', '.', '.', '8', '.', '.', '7', '9'}};
        boolean validSudoku = new Solution().isValidSudoku(data);
        System.out.println(validSudoku);
    }
}
